---
- name: Encrypt internal api extension with the project vault key
  hosts: 127.0.0.1
  connection: local

  vars_files:
    - vars/external_vars.yml

  tasks:
    - name: Get local pwd
      command: "echo {{ lookup('env', 'PWD') }}"
      register: pwd

    - name: Sync the lastpass database
      command: lpass sync

    - name: Get the vault password from lastpass
      command: lpass show -F {{ vault_key }} --password
      register: vault_password_res
      ignore_errors: yes

    - name: Generate vault password if it doesn't exist yet
      command: "lpass generate --sync now --no-symbols {{ vault_key }} 32"
      register: vault_password
      when: vault_password_res is failed

    - name: Store generated password in correct folder
      command: "lpass mv --sync now {{ vault_key }} Ansible"
      when: vault_password_res is failed

    - name: Set vault password if it does exist
      set_fact:
        cacheable: no
        vault_password: "{{ vault_password_res }}"
      when: vault_password_res is succeeded

    - name: Find the extensions
      find:
        paths: "{{ '/'.join((pwd.stdout, 'aiotumblr', 'extensions')) }}"
        patterns: 'internal*.py'
      register: extensions

    - name: Check if extensions are already encrypted
      lineinfile:
        name: "{{ item.path }}"
        state: absent
        regexp: '^\$ANSIBLE_VAULT.*$'
      check_mode: yes
      register: res_ext_encrypted
      failed_when: (res_ext_encrypted is changed) or (res_ext_encrypted is failed)
      ignore_errors: yes
      with_items:
        - "{{ extensions.files }}"

    - name: Encrypt the extensions that aren't encrypted yet
      shell: |
        spawn ansible-vault encrypt "{{ item.item.path }}"

        expect "New Vault password:"
        send "{{ vault_password.stdout }}\n"

        expect "Confirm New Vault password:"
        send "{{ vault_password.stdout }}\n"

        expect "Encryption successful"

        exit 0
      args:
        executable: /usr/bin/expect
        chdir: "{{ '/'.join((pwd.stdout, 'aiotumblr', 'extensions')) }}"
      when: item is not failed
      with_items:
        - "{{ res_ext_encrypted.results }}"

    - name: Add the newly encrypted extensions back to the working tree to commit them
      command: 'git add "{{ item.item.path }}"'
      args:
        chdir: "{{ '/'.join((pwd.stdout, 'aiotumblr', 'extensions')) }}"
      when: item is not failed
      with_items:
        - "{{ res_ext_encrypted.results }}"